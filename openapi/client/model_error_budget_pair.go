/*
 * Athene
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorBudgetPair struct for ErrorBudgetPair
type ErrorBudgetPair struct {
	T int64   `json:"t"`
	V float64 `json:"v"`
}

// NewErrorBudgetPair instantiates a new ErrorBudgetPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorBudgetPair(t int64, v float64) *ErrorBudgetPair {
	this := ErrorBudgetPair{}
	this.T = t
	this.V = v
	return &this
}

// NewErrorBudgetPairWithDefaults instantiates a new ErrorBudgetPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorBudgetPairWithDefaults() *ErrorBudgetPair {
	this := ErrorBudgetPair{}
	return &this
}

// GetT returns the T field value
func (o *ErrorBudgetPair) GetT() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *ErrorBudgetPair) GetTOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *ErrorBudgetPair) SetT(v int64) {
	o.T = v
}

// GetV returns the V field value
func (o *ErrorBudgetPair) GetV() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.V
}

// GetVOk returns a tuple with the V field value
// and a boolean to check if the value has been set.
func (o *ErrorBudgetPair) GetVOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.V, true
}

// SetV sets field value
func (o *ErrorBudgetPair) SetV(v float64) {
	o.V = v
}

func (o ErrorBudgetPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["t"] = o.T
	}
	if true {
		toSerialize["v"] = o.V
	}
	return json.Marshal(toSerialize)
}

type NullableErrorBudgetPair struct {
	value *ErrorBudgetPair
	isSet bool
}

func (v NullableErrorBudgetPair) Get() *ErrorBudgetPair {
	return v.value
}

func (v *NullableErrorBudgetPair) Set(val *ErrorBudgetPair) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorBudgetPair) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorBudgetPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorBudgetPair(val *ErrorBudgetPair) *NullableErrorBudgetPair {
	return &NullableErrorBudgetPair{value: val, isSet: true}
}

func (v NullableErrorBudgetPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorBudgetPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

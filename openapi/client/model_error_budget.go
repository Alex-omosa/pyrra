/*
 * Athene
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorBudget struct for ErrorBudget
type ErrorBudget struct {
	Pair []ErrorBudgetPair `json:"pair"`
}

// NewErrorBudget instantiates a new ErrorBudget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorBudget(pair []ErrorBudgetPair) *ErrorBudget {
	this := ErrorBudget{}
	this.Pair = pair
	return &this
}

// NewErrorBudgetWithDefaults instantiates a new ErrorBudget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorBudgetWithDefaults() *ErrorBudget {
	this := ErrorBudget{}
	return &this
}

// GetPair returns the Pair field value
func (o *ErrorBudget) GetPair() []ErrorBudgetPair {
	if o == nil {
		var ret []ErrorBudgetPair
		return ret
	}

	return o.Pair
}

// GetPairOk returns a tuple with the Pair field value
// and a boolean to check if the value has been set.
func (o *ErrorBudget) GetPairOk() (*[]ErrorBudgetPair, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pair, true
}

// SetPair sets field value
func (o *ErrorBudget) SetPair(v []ErrorBudgetPair) {
	o.Pair = v
}

func (o ErrorBudget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pair"] = o.Pair
	}
	return json.Marshal(toSerialize)
}

type NullableErrorBudget struct {
	value *ErrorBudget
	isSet bool
}

func (v NullableErrorBudget) Get() *ErrorBudget {
	return v.value
}

func (v *NullableErrorBudget) Set(val *ErrorBudget) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorBudget) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorBudget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorBudget(val *ErrorBudget) *NullableErrorBudget {
	return &NullableErrorBudget{value: val, isSet: true}
}

func (v NullableErrorBudget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorBudget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

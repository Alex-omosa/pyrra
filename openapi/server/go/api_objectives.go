/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ObjectivesApiController binds http requests to an api service and writes the service results to the http response
type ObjectivesApiController struct {
	service ObjectivesApiServicer
}

// NewObjectivesApiController creates a default api controller
func NewObjectivesApiController(s ObjectivesApiServicer) Router {
	return &ObjectivesApiController{service: s}
}

// Routes returns all of the api route for the ObjectivesApiController
func (c *ObjectivesApiController) Routes() Routes {
	return Routes{
		{
			"GetMultiBurnrateAlerts",
			strings.ToUpper("Get"),
			"/api/v1/objectives/{expr}/alerts",
			c.GetMultiBurnrateAlerts,
		},
		{
			"GetObjective",
			strings.ToUpper("Get"),
			"/api/v1/objectives/{expr}",
			c.GetObjective,
		},
		{
			"GetObjectiveErrorBudget",
			strings.ToUpper("Get"),
			"/api/v1/objectives/{expr}/errorbudget",
			c.GetObjectiveErrorBudget,
		},
		{
			"GetObjectiveStatus",
			strings.ToUpper("Get"),
			"/api/v1/objectives/{expr}/status",
			c.GetObjectiveStatus,
		},
		{
			"GetREDErrors",
			strings.ToUpper("Get"),
			"/api/v1/objectives/{expr}/red/errors",
			c.GetREDErrors,
		},
		{
			"GetREDRequests",
			strings.ToUpper("Get"),
			"/api/v1/objectives/{expr}/red/requests",
			c.GetREDRequests,
		},
		{
			"ListObjectives",
			strings.ToUpper("Get"),
			"/api/v1/objectives",
			c.ListObjectives,
		},
	}
}

// GetMultiBurnrateAlerts - Get the MultiBurnrateAlerts for the Objective
func (c *ObjectivesApiController) GetMultiBurnrateAlerts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	expr := params["expr"]

	result, err := c.service.GetMultiBurnrateAlerts(r.Context(), expr)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetObjective - Get Objective
func (c *ObjectivesApiController) GetObjective(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	expr := params["expr"]

	result, err := c.service.GetObjective(r.Context(), expr)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetObjectiveErrorBudget - Get ErrorBudget graph sample pairs
func (c *ObjectivesApiController) GetObjectiveErrorBudget(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	expr := params["expr"]

	start, err := parseInt32Parameter(query.Get("start"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	end, err := parseInt32Parameter(query.Get("end"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetObjectiveErrorBudget(r.Context(), expr, start, end)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetObjectiveStatus - Get objective status
func (c *ObjectivesApiController) GetObjectiveStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	expr := params["expr"]

	result, err := c.service.GetObjectiveStatus(r.Context(), expr)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetREDErrors - Get a matrix of error percentage by label
func (c *ObjectivesApiController) GetREDErrors(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	expr := params["expr"]

	start, err := parseInt32Parameter(query.Get("start"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	end, err := parseInt32Parameter(query.Get("end"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetREDErrors(r.Context(), expr, start, end)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetREDRequests - Get a matrix of requests by label
func (c *ObjectivesApiController) GetREDRequests(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	expr := params["expr"]

	start, err := parseInt32Parameter(query.Get("start"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	end, err := parseInt32Parameter(query.Get("end"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetREDRequests(r.Context(), expr, start, end)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListObjectives - List Objectives
func (c *ObjectivesApiController) ListObjectives(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListObjectives(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
